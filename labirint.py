class LabirintTurtle:
    def __init__(self):
        self.labirint = []
        self.turtle = []
        self.map = 2
        self.ismap = False

    def load_map(self, name="", *args, **kwargs):
        try:
            file = open(name, "r")
            f = (file.read()).split("\n")
            self.labirint = f[:len(f) - 2]
            self.turtle.append(int(f[-2]))
            self.turtle.append(int(f[-1]))
            file.close()
            self.ismap = True
        except:
            print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–±—Ö–æ–¥–∏–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.")

    def show_map(self, turtle=False):
        if self.ismap and self.map == 1:
            if turtle:
                a = self.labirint[self.turtle[0]][self.turtle[1]]
                self.labirint[self.turtle[0]][self.turtle[1]] = "üê¢"
            for i in self.labirint:
                print(*i)
            if turtle:
                self.labirint[self.turtle[0]][self.turtle[1]] = a
        else:
            print("–ö–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π")


    def check_map(self):
        if self.ismap:
            w = len(self.labirint[0])
            h = len(self.labirint)
            if self.labirint[self.turtle[0]][self.turtle[1]] == "*":
                self.map = 0
            if self.map:
                for j in self.labirint:
                    for i in j:
                        if i != " " or i != "*":
                            self.map = 0
            if self.map:
                k = 0
                if (" " not in self.labirint[0][1:w - 2:]) and (" " not in self.labirint[w - 1][1:w - 2:]):
                    for i in self.labirint[1:w - 2:]:
                        if i[0] == " " or i[w - 1] == " ":
                            k = 1
                            break
                    if not k:
                        self.map = 0


    def exit_count_step(self):
        pass

    def exit_show_step(self):
        pass


print("üê¢           üê¢")
print("üë£           üêæ")
print("üë£           üêæ")
print("üë£           üêæ")